Tasks:
    Time mod and if statements. Go back to fake data test to verify that it works.
    autogenerate the fake data objects
    pass thread_num as a parameter to all functions that use it?

    In autogen.py, in autotune_wrap_call, change "inner"
    to be returned from a proper function. 

Code:
    Note: each reference to fake_dpotrf_data will become
    data[thread_num][CORE_DPOTRF]

    int thread_num = omp_get_thread_num();

    int random_n = rand() % autotune.kernel_stride + 1;

    if(random_n <= autotune.kernel_run)
    {

        if(fake_dpotrf_data.tile_times_empty())
        {
            double *m = fake_dpotrf_data.tile();

            profile.track();
            int ret_val = core_dpotrf(
                    PlasmaLower,
                    fake_dpotrf_data.get_tile_size(),
                    m,
                    fake_dpotrf_data.get_tile_size()
                    );

            profile.track();
            fake_dpotrf_data.append_time(profile.last_kernel_time());
        }

        else if(fake_dpotrf_data.clip_empty())
        {
            double t = fake_dpotrf_data.tile_time();
            profile.track();
            fake_dpotrf_data.busy_wait(t);
            profile.track();
        }

        else
        {
            if(++autotune.iterations[thread_num][CORE_TYPE] == autotune.run_val)
            {
                autotune.iterations[thread_num][CORE_TYPE] = -1;

                double *m = fake_dpotrf_data.tile();

                profile.track();
                int ret_val = core_dpotrf(
                        PlasmaLower,
                        fake_dpotrf_data.get_tile_size(),
                        m,
                        fake_dpotrf_data.get_tile_size()
                        );

                profile.track();
                fake_dpotrf_data.append_time(elapsed);
            }

            else
            {
                double t = fake_dpotrf_data.tile_time();

                /* Technically these are not needed and only present for testing */
                profile.track_kernel();
                fake_dpotrf_data.busy_wait(t);
                profile.track_kernel();
            }
        }
    }

Integrate into dare:
    
    is there a way to round robin it like in main.cpp?

    you don't even need the invocation id in profile class...
    take it out. Repurpose that into an "iterations" counter
    and replicate main.cpp's usage. Build that into the fake_data
    class.

    iterations[thread_num][kernel_type]

    is there a faster way to make a fake_data container? 

    do we know up front which kernels will be called? Probably not.

Implement:
    
    1. Busy-waiting for clip times
    2. Class factory generator

    you'll want a map of fake data objects.

    fake_data_bank[CORE_WHATEVER][thread_num]

    You need to be able to ignore certain core_blas types.
    For example, all the little ones called inside of an SVD
    or QR.

    Create a base class that returns proper objects
    Maybe template it?
