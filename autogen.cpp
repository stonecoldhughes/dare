/* This file will be completely autogenerated */
#include "profile.h"

using namespace std;

atomic<unsigned long> Profile::core_dgemm_count;
atomic<unsigned long> Profile::core_dpotrf_count;
atomic<unsigned long> Profile::core_dsyrk_count;
atomic<unsigned long> Profile::core_dtrsm_count;
atomic<unsigned long> Profile::core_count[TABLE_SIZE];

/*This will obtain function pointers to hooks in the PLASMA library*/
Profile::Profile()
{
    void (*fptr)();
    /* Captain! Outsource all of this functionality to a generated C file */
    /* Obtain a handle to the core_blas library */
    core_blas_file = dlopen("/Users/hhughe11/plasma/lib/libcoreblas.so", RTLD_LAZY);
    if(core_blas_file == NULL) {printf("core_blas_file null\n"); exit(0);}

    /* hook core_dsyrk() */
    fptr = (void (*)())dlsym(core_blas_file, "core_dsyrk");
    if(fptr == NULL) {printf("core_dsyrk() hook NULL\n"); exit(0);}
    core[CORE_DSYRK] = fptr;
    
    /* hook core_dgemm() */
    core_dgemm_hook = (core_dgemm_hook_type)dlsym(core_blas_file, "core_dgemm");
    if(core_dgemm_hook == NULL) {printf("core_dgemm() hook NULL\n"); exit(0);}
    
    /* hook core_dtrsm() */
    core_dtrsm_hook = (core_dtrsm_hook_type)dlsym(core_blas_file, "core_dtrsm");
    if(core_dtrsm_hook == NULL) {printf("core_dtrsm() hook NULL\n"); exit(0);}

    /* hook core_dpotrf() */
    core_dpotrf_hook = (core_dpotrf_hook_type)dlsym(core_blas_file, "core_dpotrf");
    if(core_dpotrf_hook == NULL) {printf("core_dpotrf() hook NULL\n"); exit(0);}

    /*set atomic counters*/
    core_dgemm_count = 0;
    core_dsyrk_count = 0;
    core_dtrsm_count = 0;
    core_dpotrf_count = 0;

    for(int i = 0; i < TABLE_SIZE; i++)
    {
        core_count[i] = 0;
    }
    
    return;
}
